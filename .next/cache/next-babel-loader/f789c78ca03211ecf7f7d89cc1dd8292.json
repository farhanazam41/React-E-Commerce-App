{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport Cart from '../../models/Cart';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!isLength(name, {\n      min: 3,\n      max: 15\n    })) {\n      return res.status(422).send(\"Name must be 3-10 characters long\");\n    } else if (!isLength(password, {\n      min: 6\n    })) {\n      return res.status(422).send(\"Password must  be atleast 6 characters long \");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid\");\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exists with email ${email}`);\n    }\n\n    const hash = await bcrypt.hash(password, 10);\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save();\n    console.log({\n      newUser\n    });\n    await new Cart({\n      user: newUser._id\n    }).save();\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    });\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error signing up user. Please try again later');\n  }\n});","map":{"version":3,"sources":["C:\\Users\\farha\\Desktop\\reacttest\\pages\\api\\signup.js"],"names":["connectDb","User","Cart","bcrypt","jwt","isEmail","isLength","req","res","name","email","password","body","min","max","status","send","user","findOne","hash","newUser","save","console","log","_id","token","sign","userId","process","env","JWT_SECRET","expiresIn","json","error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEAN,SAAS;AAER,gBAAe,OAAOO,GAAP,EAAYC,GAAZ,KAAoB;AAChC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACE,MAAI;AACF,QAAK,CAACN,QAAQ,CAACG,IAAD,EAAO;AAAEI,MAAAA,GAAG,EAAC,CAAN;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAAP,CAAd,EAAyC;AACrC,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB,CAAP;AACH,KAFD,MAGK,IAAK,CAACV,QAAQ,CAACK,QAAD,EAAW;AAAEE,MAAAA,GAAG,EAAC;AAAN,KAAX,CAAd,EAAmC;AACpC,aAAOL,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8CAArB,CAAP;AACH,KAFI,MAGA,IAAI,CAACX,OAAO,CAACK,KAAD,CAAZ,EAAoB;AACrB,aAAOF,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACH;;AACD,UAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACiB,OAAL,CAAa;AAAER,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAKO,IAAL,EAAW;AACP,aAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,kCAAiCN,KAAM,EAA7D,CAAP;AACH;;AACD,UAAMS,IAAI,GAAG,MAAMhB,MAAM,CAACgB,IAAP,CAAYR,QAAZ,EAAsB,EAAtB,CAAnB;AAEA,UAAMS,OAAO,GAAG,MAAM,IAAInB,IAAJ,CAAS;AAC3BQ,MAAAA,IAD2B;AAE3BC,MAAAA,KAF2B;AAG3BC,MAAAA,QAAQ,EAAEQ;AAHiB,KAAT,EAInBE,IAJmB,EAAtB;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,MAAAA;AAAD,KAAZ;AAEA,UAAM,IAAIlB,IAAJ,CAAS;AAAEe,MAAAA,IAAI,EAAEG,OAAO,CAACI;AAAhB,KAAT,EAAgCH,IAAhC,EAAN;AAEA,UAAMI,KAAK,GAAGrB,GAAG,CAACsB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAGP,OAAO,CAACI;AAAnB,KAAT,EAAkCI,OAAO,CAACC,GAAR,CAAYC,UAA9C,EAAyD;AACnEC,MAAAA,SAAS,EAAE;AADwD,KAAzD,CAAd;AAGAvB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqBP,KAArB;AACD,GA9BD,CA8BE,OAAMQ,KAAN,EAAY;AACXX,IAAAA,OAAO,CAACW,KAAR,CAAcA,KAAd;AACAzB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+CAArB;AACF;AACN,CApCA","sourcesContent":["import connectDb from '../../utils/connectDb';\r\nimport User from '../../models/User';\r\nimport Cart from '../../models/Cart';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport isLength from 'validator/lib/isLength';\r\n\r\nconnectDb();\r\n\r\n export default async (req, res) => {\r\n    const { name, email, password } = req.body;\r\n      try {\r\n        if ( !isLength(name, { min:3 , max: 15})){\r\n            return res.status(422).send(\"Name must be 3-10 characters long\");\r\n        }\r\n        else if ( !isLength(password, { min:6})){\r\n            return res.status(422).send(\"Password must  be atleast 6 characters long \");\r\n        }\r\n        else if( !isEmail(email)){\r\n            return res.status(422).send(\"Email must be valid\");\r\n        }\r\n        const user = await User.findOne({ email });\r\n        if ( user ){\r\n            return res.status(422).send(`User already exists with email ${email}`);\r\n        }\r\n        const hash = await bcrypt.hash(password, 10);\r\n\r\n        const newUser = await new User({\r\n            name,\r\n            email,\r\n            password: hash\r\n        }).save();\r\n\r\n        console.log({newUser});\r\n\r\n        await new Cart({ user: newUser._id }).save(); \r\n\r\n        const token = jwt.sign({ userId : newUser._id}, process.env.JWT_SECRET,{ \r\n            expiresIn: '7d'\r\n        });\r\n        res.status(201).json(token);\r\n      } catch(error){\r\n         console.error(error);\r\n         res.status(500).send('Error signing up user. Please try again later')\r\n      }\r\n};"]},"metadata":{},"sourceType":"module"}