{"ast":null,"code":"import Order from '../../models/Order';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const orders = await Order.find({\n      user: userId\n    }).sort({\n      createdAt: 'desc'\n    }).populate({\n      path: 'products.product',\n      model: 'Product'\n    });\n    res.status(200).json({\n      orders\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(403).send('Please login again');\n  }\n});","map":{"version":3,"sources":["C:\\Users\\farha\\Desktop\\reacttest\\pages\\api\\orders.js"],"names":["Order","jwt","connectDb","req","res","userId","verify","headers","authorization","process","env","JWT_SECRET","orders","find","user","sort","createdAt","populate","path","model","status","json","error","console","send"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAGT,gBAAgB,OAAQC,GAAR,EAAaC,GAAb,KAAqB;AACjC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAaJ,GAAG,CAACK,MAAJ,CAAWH,GAAG,CAACI,OAAJ,CAAYC,aAAvB,EAAsCC,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAnB;AACA,UAAMC,MAAM,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAX,EAA4BU,IAA5B,CAAiC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAjC,EAAuDC,QAAvD,CAAgE;AACjFC,MAAAA,IAAI,EAAE,kBAD2E;AAEjFC,MAAAA,KAAK,EAAC;AAF2E,KAAhE,CAArB;AAIAf,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAET,MAAAA;AAAF,KAArB;AACD,GAPD,CAOE,OAAMU,KAAN,EACF;AACEC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAlB,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,oBAArB;AACD;AACJ,CAbD","sourcesContent":["import Order from '../../models/Order';\r\nimport jwt from 'jsonwebtoken';\r\nimport connectDb from '../../utils/connectDb';\r\n\r\nconnectDb();\r\n\r\n\r\nexport default  async ( req, res) => {\r\n    try {\r\n      const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\r\n      const orders = await Order.find({ user: userId}).sort({ createdAt: 'desc'}).populate({\r\n          path: 'products.product',\r\n          model:'Product'\r\n      })\r\n      res.status(200).json({ orders });\r\n    } catch(error)\r\n    {\r\n      console.error(error);\r\n      res.status(403).send('Please login again');\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}