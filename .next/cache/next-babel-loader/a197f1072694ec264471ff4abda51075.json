{"ast":null,"code":"import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'GET':\n      await handleGetRequest(req, res);\n      break;\n\n    case 'PUT':\n      await handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token\");\n  }\n}\n\n;\n\nasync function handlePutRequest(req, res) {\n  const {\n    _id,\n    role\n  } = req.body;\n  await User.findOneAndUpdate({\n    _id\n  }, {\n    role\n  });\n  res.status(203).send('User Update');\n}","map":{"version":3,"sources":["C:\\Users\\farha\\Desktop\\reacttest\\pages\\api\\account.js"],"names":["User","jwt","connectDb","req","res","method","handleGetRequest","handlePutRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","_id","json","error","role","body","findOneAndUpdate"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAQC,GAAR,EAAaC,GAAb,KAAqB;AAChC,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,KAAL;AACI,YAAMC,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACJ,SAAK,KAAL;AACI,YAAMG,gBAAgB,CAAEJ,GAAF,EAAOC,GAAP,CAAtB;AACA;;AACJ;AACAA,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASN,GAAG,CAACE,MAAO,cAA1C;AACA;AATJ;AAWH,CAZD;;AAcC,eAAeC,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAA0C;AACvC,MAAG,EAAE,mBAAmBD,GAAG,CAACO,OAAzB,CAAH,EAAqC;AAClC,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB,CAAP;AACF;;AACD,MAAG;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAaV,GAAG,CAACW,MAAJ,CAClBT,GAAG,CAACO,OAAJ,CAAYG,aADM,EAElBC,OAAO,CAACC,GAAR,CAAYC,UAFM,CAAnB;AAID,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAACC,MAAAA,GAAG,EAAER;AAAN,KAAb,CAAnB;;AAEA,QAAGM,IAAH,EAAQ;AACJb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBH,IAArB;AACH,KAFD,MAEO;AACHb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACH;AAEA,GAbD,CAaC,OAAMY,KAAN,EAAY;AAEbjB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AAEC;AACJ;;AAAA;;AAGD,eAAeF,gBAAf,CAAgCJ,GAAhC,EAAqCC,GAArC,EAAyC;AAErC,QAAM;AAAEe,IAAAA,GAAF;AAAOG,IAAAA;AAAP,MAAiBnB,GAAG,CAACoB,IAA3B;AACA,QAAMvB,IAAI,CAACwB,gBAAL,CACF;AAACL,IAAAA;AAAD,GADE,EAEF;AAACG,IAAAA;AAAD,GAFE,CAAN;AAIAlB,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAArB;AACH","sourcesContent":["import User from '../../models/User';\r\nimport jwt from 'jsonwebtoken';\r\nimport connectDb from '../../utils/connectDb';\r\n\r\nconnectDb();\r\n\r\nexport default async ( req, res) => {\r\n    switch(req.method) {\r\n        case 'GET':\r\n            await handleGetRequest(req, res);\r\n            break;\r\n        case 'PUT':\r\n            await handlePutRequest( req, res);\r\n            break;\r\n        default :\r\n        res.status(405).send(`Method ${req.method} not allowed`);\r\n        break;\r\n    }\r\n}\r\n\r\n async function handleGetRequest(req, res) {\r\n    if(!(\"authorization\" in req.headers)){\r\n       return res.status(401).send(\"No authorization token\");\r\n    }\r\n    try{\r\n     const { userId } = jwt.verify\r\n     (req.headers.authorization,\r\n      process.env.JWT_SECRET\r\n    );\r\n    const user = await User.findOne({_id: userId });\r\n    \r\n    if(user){\r\n        res.status(200).json(user);\r\n    } else {\r\n        res.status(404).send(\"User not found\");\r\n    }\r\n    \r\n    }catch(error){\r\n\r\n    res.status(403).send(\"Invalid token\");\r\n\r\n    }\r\n};\r\n\r\n\r\nasync function handlePutRequest(req, res){\r\n    \r\n    const { _id, role }  = req.body;\r\n    await User.findOneAndUpdate(\r\n        {_id},\r\n        {role}\r\n    )\r\n    res.status(203).send('User Update');\r\n}"]},"metadata":{},"sourceType":"module"}