{"ast":null,"code":"import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nconst {\n  ObjectId\n} = mongoose.Types;\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handelDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\nasync function handlePutRequest(req, res) {\n  const {\n    quantity,\n    productId\n  } = req.body;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    });\n    const productExists = cart.products.some(doc => ObjectId(productId).equals(doc.product));\n\n    if (productExists) {\n      await Cart.findOneAndUpdate({\n        _id: cart._id,\n        \"products.product\": productId\n      }, {\n        $inc: {\n          \"products.$.quantity\": quantity\n        }\n      });\n    } else {\n      const newProduct = {\n        quantity,\n        product: productId\n      };\n      await Cart.findOneAndUpdate({\n        _id: cart._id\n      }, {\n        $addToSet: {\n          products: newProduct\n        }\n      });\n    }\n\n    res.status(200).send(\" Cart updated\");\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\nasync function handelDeleteRequest(req, res) {\n  const {\n    productId\n  } = req.query;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOneAndUpdate({\n      user: userId\n    }, {\n      $pull: {\n        products: {\n          product: productId\n        }\n      }\n    }, {\n      new: true\n    }).populate({\n      path: 'products.product',\n      model: 'Product'\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}","map":{"version":3,"sources":["C:\\Users\\farha\\Desktop\\reacttest\\pages\\api\\cart.js"],"names":["mongoose","jwt","Cart","connectDb","ObjectId","Types","req","res","method","handleGetRequest","handlePutRequest","handelDeleteRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","cart","findOne","user","populate","path","model","json","products","error","console","quantity","productId","body","productExists","some","doc","equals","product","findOneAndUpdate","_id","$inc","newProduct","$addToSet","query","$pull","new"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\r\nimport jwt from 'jsonwebtoken';\r\nimport Cart from '../../models/Cart';\r\nimport connectDb from '../../utils/connectDb';\r\n\r\nconnectDb();\r\n\r\nconst { ObjectId } = mongoose.Types;\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n      case \"GET\" :\r\n          await handleGetRequest(req,res);\r\n          break;\r\n      case \"PUT\" :\r\n          await handlePutRequest( req, res);\r\n          break;\r\n      case \"DELETE\" :\r\n          await handelDeleteRequest( req, res);\r\n          break;    \r\n      default:\r\n          res.status(405).send(`Method ${req.method} not allowed`);\r\n          break;   \r\n    }\r\n} ;\r\n\r\nasync function handleGetRequest ( req, res) {\r\n     if ( !(\"authorization\" in req.headers)) {\r\n         return res.status(401).send(\"No authorization token\");\r\n     }\r\n     try {\r\n         const { userId } = jwt.verify(req.headers.authorization,\r\n            process.env.JWT_SECRET);\r\n            const cart = await Cart.findOne({ user: userId}).populate({\r\n                path: \"products.product\",\r\n                model: \"Product\"\r\n            });\r\n             res.status(200).json(cart.products);\r\n     } catch(error){\r\n       console.error(error)\r\n       res.status(403).send(\"Please login again\");\r\n     }\r\n}\r\n\r\n\r\nasync function handlePutRequest(req, res) {\r\n       \r\n    const { quantity, productId } = req.body;\r\n\r\n    if ( !(\"authorization\" in req.headers)) {\r\n        return res.status(401).send(\"No authorization token\");\r\n    }\r\n    try {\r\n        const { userId } = jwt.verify(req.headers.authorization,\r\n            process.env.JWT_SECRET);\r\n\r\n        const cart = await Cart.findOne({ user: userId});\r\n\r\n        const productExists = cart.products.some(doc => ObjectId(productId).equals(doc.product));\r\n\r\n        if ( productExists) {\r\n             await Cart.findOneAndUpdate(\r\n                {_id: cart._id, \"products.product\" : productId },\r\n                { $inc: { \"products.$.quantity\": quantity  } }\r\n            )\r\n        } else {\r\n            const newProduct = { quantity, product: productId };\r\n            await Cart.findOneAndUpdate(\r\n                { _id: cart._id },\r\n                { $addToSet: { products : newProduct }}\r\n            );\r\n        }\r\n         res.status(200).send(\" Cart updated\");\r\n\r\n    }catch( error){\r\n        console.error(error)\r\n        res.status(403).send(\"Please login again\")\r\n    }\r\n      \r\n}\r\n\r\nasync function handelDeleteRequest(req, res) {\r\n    const { productId } = req.query\r\n    if ( !(\"authorization\" in req.headers)) {\r\n        return res.status(401).send(\"No authorization token\");\r\n    }\r\n    try {\r\n        const { userId } = jwt.verify(req.headers.authorization,\r\n            process.env.JWT_SECRET);\r\n        const cart = await Cart.findOneAndUpdate(\r\n                { user: userId },\r\n                { $pull : { products: { product: productId} } },\r\n                { new: true}\r\n            ).populate({\r\n                path: 'products.product',\r\n                model: 'Product'\r\n            })\r\n            res.status(200).json(cart.products);\r\n\r\n    } catch(error){\r\n        console.error(error)\r\n        res.status(403).send(\"Please login again\")\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}