{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    const user = await User.findOne({\n      email\n    }).select('+password');\n\n    if (!user) {\n      return res.status(404).send(\"No User exist with that email\");\n    }\n\n    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: '7d'\n      });\n      res.status(200).json(token);\n    } else {\n      res.status(401).send(\"Password do not match\");\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user\");\n  } finally {}\n});","map":{"version":3,"sources":["C:\\Users\\farha\\Desktop\\reacttest\\pages\\api\\login.js"],"names":["connectDb","User","bcrypt","jwt","req","res","email","password","body","user","findOne","select","status","send","passwordsMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,SAAS;AAGT,gBAAe,OAAQI,GAAR,EAAaC,GAAb,KAAsB;AAEjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AAEA,MAAG;AACC,UAAMC,IAAI,GAAG,MAAMR,IAAI,CAACS,OAAL,CAAa;AAACJ,MAAAA;AAAD,KAAb,EAAsBK,MAAtB,CAA6B,WAA7B,CAAnB;;AACA,QAAG,CAACF,IAAJ,EAAS;AACN,aAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+BAArB,CAAP;AACF;;AACD,UAAMC,cAAc,GAAG,MAAMZ,MAAM,CAACa,OAAP,CAAgBR,QAAhB,EAA0BE,IAAI,CAACF,QAA/B,CAA7B;;AAEA,QAAGO,cAAH,EAAkB;AACd,YAAME,KAAK,GAAIb,GAAG,CAACc,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,OAAT,EAAgCC,OAAO,CAACC,GAAR,CAAYC,UAA5C,EAAwD;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAxD,CAAf;AACAlB,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACH,KAHD,MAGO;AACHX,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACH;AAEJ,GAdD,CAcE,OAAMY,KAAN,EAAY;AAEVC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACH,GAlBD,SAkBS,CAER;AACJ,CAzBD","sourcesContent":["import connectDb from '../../utils/connectDb';\r\nimport User from '../../models/User';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconnectDb();\r\n\r\n\r\nexport default async ( req, res ) => {\r\n    \r\n    const { email, password } = req.body ;\r\n      \r\n    try{\r\n        const user = await User.findOne({email}).select('+password');\r\n        if(!user){\r\n           return res.status(404).send(\"No User exist with that email\")\r\n        }\r\n        const passwordsMatch = await bcrypt.compare( password, user.password);\r\n\r\n        if(passwordsMatch){\r\n            const token =  jwt.sign({ userId: user._id } , process.env.JWT_SECRET, { expiresIn: '7d'})\r\n            res.status(200).json(token);\r\n        } else {\r\n            res.status(401).send(\"Password do not match\");\r\n        }\r\n\r\n    } catch(error){\r\n       \r\n        console.error(error);\r\n        res.status(500).send(\"Error logging in user\");\r\n    } finally{\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}